{"ast":null,"code":"var _jsxFileName = \"/Users/fadialexander/Desktop/digitaldoctor/client/src/containers/Charts/ChartsHeight.js\";\n// Importing React since we are using React.\nimport React from 'react'; // Import API\n\nimport MedLogAPI from '../../utils/MedLogAPI'; // Importing UI components from material-ui-next\n\nimport Typography from 'material-ui/Typography';\nimport Card from 'material-ui/Card';\nimport { withStyles } from 'material-ui/styles';\nimport FusionCharts from 'fusioncharts'; // Load the charts module\n\nimport Charts from 'fusioncharts/fusioncharts.charts'; // Pass fusioncharts as a dependency of charts\n\nCharts(FusionCharts); // Style for add appointments form.\n\nconst styles = {\n  textField: {\n    marginTop: 40\n  },\n  // Tell Material-UI what's the font-size on the html element is.\n  typography: {\n    htmlFontSize: 30,\n    marginTop: 30\n  },\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    borderStyle: 'solid',\n    borderWidth: 4,\n    borderColor: '#33658A',\n    marginBottom: 40\n  },\n  formControl: {\n    minWidth: 120\n  },\n  button: {\n    marginTop: 20,\n    padding: 15,\n    backgroundColor: '#007AC1',\n    color: 'white'\n  }\n};\n\nclass ChartsHeight extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      logs: [],\n      heightArray: [],\n      dateArray: []\n    };\n\n    this.loadLogs = () => {\n      MedLogAPI.getLogs().then(res => {\n        this.setState({\n          logs: res.data\n        });\n        console.log(\"here are the logs\", this.state.logs);\n        const data = this.state.logs.map(log => {\n          return {\n            label: log.date,\n            value: log.heightIn\n          };\n        });\n        console.log(data);\n        this.loadHeightChart(data);\n      }).catch(err => console.log(err));\n    };\n  }\n\n  componentDidMount() {\n    this.loadLogs();\n  }\n\n  loadHeightChart(data) {\n    const heightChart = new FusionCharts({\n      type: 'line',\n      renderAt: 'heightContainer',\n      className: 'line',\n      //  ReactJS attribute-name for DOM classes\n      dataFormat: 'JSON',\n      width: '66%',\n      height: '40%',\n      dataSource: {\n        chart: {\n          xaxisname: 'Date',\n          yaxisname: \"Height (In inches)\",\n          yAxisNamePadding: \"30\",\n          chartTopMargin: \"40\",\n          linecolor: \"#f8bd19\",\n          plotgradientcolor: \"\",\n          bgcolor: \"#fcdb88\",\n          showalternatehgridcolor: \"0\",\n          canvasPadding: \"30\",\n          divlinecolor: \"#f8bd19\",\n          showvalues: \"0\",\n          showcanvasborder: \"1\",\n          canvasborderalpha: \"0\",\n          canvasbordercolor: \"CCCCCC\",\n          canvasborderthickness: \"1\",\n          captionpadding: \"30\",\n          linethickness: \"3\",\n          legendshadow: \"0\",\n          legendborderalpha: \"0\",\n          palettecolors: \"#f8bd19,#008ee4,#33bdda,#e44a00,#6baa01,#583e78\",\n          showborder: \"0\",\n          anchorRadius: \"5\",\n          anchorHoverRadius: \"8\",\n          anchorHoverColor: \"#f8bd19\",\n          anchorBgColor: \"\",\n          anchorBgHoverColor: \"#f8bd19\"\n        },\n        data: data\n      }\n    });\n    heightChart.render();\n  } // Loads all logs and saves them to this.state.logs.\n\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      gutterBottom: true,\n      variant: \"headline\",\n      component: \"h2\",\n      className: classes.typography,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Height Chart\"), React.createElement(Card, {\n      className: this.props.classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"heightContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withStyles(styles)(ChartsHeight);","map":{"version":3,"sources":["/Users/fadialexander/Desktop/digitaldoctor/client/src/containers/Charts/ChartsHeight.js"],"names":["React","MedLogAPI","Typography","Card","withStyles","FusionCharts","Charts","styles","textField","marginTop","typography","htmlFontSize","root","display","flexWrap","borderStyle","borderWidth","borderColor","marginBottom","formControl","minWidth","button","padding","backgroundColor","color","ChartsHeight","Component","state","logs","heightArray","dateArray","loadLogs","getLogs","then","res","setState","data","console","log","map","label","date","value","heightIn","loadHeightChart","catch","err","componentDidMount","heightChart","type","renderAt","className","dataFormat","width","height","dataSource","chart","xaxisname","yaxisname","yAxisNamePadding","chartTopMargin","linecolor","plotgradientcolor","bgcolor","showalternatehgridcolor","canvasPadding","divlinecolor","showvalues","showcanvasborder","canvasborderalpha","canvasbordercolor","canvasborderthickness","captionpadding","linethickness","legendshadow","legendborderalpha","palettecolors","showborder","anchorRadius","anchorHoverRadius","anchorHoverColor","anchorBgColor","anchorBgHoverColor","render","classes","props"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,uBAAtB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,YAAP,MAAyB,cAAzB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,kCAAnB,C,CACA;;AACAA,MAAM,CAACD,YAAD,CAAN,C,CAEA;;AACA,MAAME,MAAM,GAAG;AACbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF,GADE;AAIb;AACAC,EAAAA,UAAU,EAAE;AACVC,IAAAA,YAAY,EAAE,EADJ;AAEVF,IAAAA,SAAS,EAAE;AAFD,GALC;AASbG,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,QAAQ,EAAE,MAFN;AAGJC,IAAAA,WAAW,EAAE,OAHT;AAIJC,IAAAA,WAAW,EAAE,CAJT;AAKJC,IAAAA,WAAW,EAAE,SALT;AAMJC,IAAAA,YAAY,EAAE;AANV,GATO;AAiBbC,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE;AADC,GAjBA;AAoBbC,EAAAA,MAAM,EAAE;AACNZ,IAAAA,SAAS,EAAE,EADL;AAENa,IAAAA,OAAO,EAAE,EAFH;AAGNC,IAAAA,eAAe,EAAE,SAHX;AAINC,IAAAA,KAAK,EAAE;AAJD;AApBK,CAAf;;AA4BA,MAAMC,YAAN,SAA2BzB,KAAK,CAAC0B,SAAjC,CAA2C;AAAA;AAAA;AAAA,SAEzCC,KAFyC,GAEjC;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,WAAW,EAAE,EAFP;AAGNC,MAAAA,SAAS,EAAE;AAHL,KAFiC;;AAAA,SAuDzCC,QAvDyC,GAuD9B,MAAM;AACf9B,MAAAA,SAAS,CAAC+B,OAAV,GACGC,IADH,CACQC,GAAG,IAAI;AACX,aAAKC,QAAL,CAAc;AAAEP,UAAAA,IAAI,EAAEM,GAAG,CAACE;AAAZ,SAAd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,KAAKX,KAAL,CAAWC,IAA5C;AACA,cAAMQ,IAAI,GAAG,KAAKT,KAAL,CAAWC,IAAX,CAAgBW,GAAhB,CAAoBD,GAAG,IAAI;AAAE,iBAAO;AAAEE,YAAAA,KAAK,EAAEF,GAAG,CAACG,IAAb;AAAmBC,YAAAA,KAAK,EAAEJ,GAAG,CAACK;AAA9B,WAAP;AAAiD,SAA9E,CAAb;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,aAAKQ,eAAL,CAAqBR,IAArB;AACD,OAPH,EAQGS,KARH,CAQSC,GAAG,IAAIT,OAAO,CAACC,GAAR,CAAYQ,GAAZ,CARhB;AASD,KAjEwC;AAAA;;AAOzCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKhB,QAAL;AACD;;AAEDa,EAAAA,eAAe,CAACR,IAAD,EAAO;AACpB,UAAMY,WAAW,GAAG,IAAI3C,YAAJ,CAAiB;AACnC4C,MAAAA,IAAI,EAAE,MAD6B;AAEnCC,MAAAA,QAAQ,EAAE,iBAFyB;AAGnCC,MAAAA,SAAS,EAAE,MAHwB;AAInC;AACAC,MAAAA,UAAU,EAAE,MALuB;AAMnCC,MAAAA,KAAK,EAAE,KAN4B;AAOnCC,MAAAA,MAAM,EAAE,KAP2B;AAQnCC,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE,MADN;AAELC,UAAAA,SAAS,EAAE,oBAFN;AAGLC,UAAAA,gBAAgB,EAAE,IAHb;AAILC,UAAAA,cAAc,EAAE,IAJX;AAKLC,UAAAA,SAAS,EAAE,SALN;AAMLC,UAAAA,iBAAiB,EAAE,EANd;AAOLC,UAAAA,OAAO,EAAE,SAPJ;AAQLC,UAAAA,uBAAuB,EAAE,GARpB;AAQyBC,UAAAA,aAAa,EAAE,IARxC;AASLC,UAAAA,YAAY,EAAE,SATT;AAULC,UAAAA,UAAU,EAAE,GAVP;AAWLC,UAAAA,gBAAgB,EAAE,GAXb;AAYLC,UAAAA,iBAAiB,EAAE,GAZd;AAaLC,UAAAA,iBAAiB,EAAE,QAbd;AAcLC,UAAAA,qBAAqB,EAAE,GAdlB;AAeLC,UAAAA,cAAc,EAAE,IAfX;AAgBLC,UAAAA,aAAa,EAAE,GAhBV;AAiBLC,UAAAA,YAAY,EAAE,GAjBT;AAkBLC,UAAAA,iBAAiB,EAAE,GAlBd;AAmBLC,UAAAA,aAAa,EAAE,iDAnBV;AAoBLC,UAAAA,UAAU,EAAE,GApBP;AAqBLC,UAAAA,YAAY,EAAE,GArBT;AAsBLC,UAAAA,iBAAiB,EAAE,GAtBd;AAuBLC,UAAAA,gBAAgB,EAAE,SAvBb;AAwBLC,UAAAA,aAAa,EAAE,EAxBV;AAyBLC,UAAAA,kBAAkB,EAAE;AAzBf,SADG;AA4BV9C,QAAAA,IAAI,EAAEA;AA5BI;AARuB,KAAjB,CAApB;AAuCAY,IAAAA,WAAW,CAACmC,MAAZ;AACD,GApDwC,CAsDzC;;;AAaAA,EAAAA,MAAM,GAAG;AAAA,UACCC,OADD,GACa,KAAKC,KADlB,CACCD,OADD;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,YAAY,MAAxB;AAAyB,MAAA,OAAO,EAAC,UAAjC;AAA4C,MAAA,SAAS,EAAC,IAAtD;AAA2D,MAAA,SAAS,EAAEA,OAAO,CAAC1E,UAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAIE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAE,KAAK2E,KAAL,CAAWD,OAAX,CAAmBxE,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,CADF;AAUD;;AA/EwC;;AAmF3C,eAAeR,UAAU,CAACG,MAAD,CAAV,CAAmBkB,YAAnB,CAAf","sourcesContent":["// Importing React since we are using React.\nimport React from 'react';\n\n// Import API\nimport MedLogAPI from '../../utils/MedLogAPI';\n\n// Importing UI components from material-ui-next\nimport Typography from 'material-ui/Typography';\nimport Card from 'material-ui/Card';\nimport { withStyles } from 'material-ui/styles';\nimport FusionCharts from 'fusioncharts';\n// Load the charts module\nimport Charts from 'fusioncharts/fusioncharts.charts';\n// Pass fusioncharts as a dependency of charts\nCharts(FusionCharts);\n\n// Style for add appointments form.\nconst styles = {\n  textField: {\n    marginTop: 40,\n  },\n  // Tell Material-UI what's the font-size on the html element is.\n  typography: {\n    htmlFontSize: 30,\n    marginTop: 30,\n  },\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    borderStyle: 'solid',\n    borderWidth: 4,\n    borderColor: '#33658A',\n    marginBottom: 40,\n  },\n  formControl: {\n    minWidth: 120,\n  },\n  button: {\n    marginTop: 20,\n    padding: 15,\n    backgroundColor: '#007AC1',\n    color: 'white',\n  },\n};\n\nclass ChartsHeight extends React.Component {\n\n  state = {\n    logs: [],\n    heightArray: [],\n    dateArray: [],\n  }\n  componentDidMount() {\n    this.loadLogs();\n  }\n\n  loadHeightChart(data) {\n    const heightChart = new FusionCharts({\n      type: 'line',\n      renderAt: 'heightContainer',\n      className: 'line',\n      //  ReactJS attribute-name for DOM classes\n      dataFormat: 'JSON',\n      width: '66%',\n      height: '40%',\n      dataSource: {\n        chart: {\n          xaxisname: 'Date',\n          yaxisname: \"Height (In inches)\",\n          yAxisNamePadding: \"30\",\n          chartTopMargin: \"40\",\n          linecolor: \"#f8bd19\",\n          plotgradientcolor: \"\",\n          bgcolor: \"#fcdb88\",\n          showalternatehgridcolor: \"0\", canvasPadding: \"30\",\n          divlinecolor: \"#f8bd19\",\n          showvalues: \"0\",\n          showcanvasborder: \"1\",\n          canvasborderalpha: \"0\",\n          canvasbordercolor: \"CCCCCC\",\n          canvasborderthickness: \"1\",\n          captionpadding: \"30\",\n          linethickness: \"3\",\n          legendshadow: \"0\",\n          legendborderalpha: \"0\",\n          palettecolors: \"#f8bd19,#008ee4,#33bdda,#e44a00,#6baa01,#583e78\",\n          showborder: \"0\",\n          anchorRadius: \"5\",\n          anchorHoverRadius: \"8\",\n          anchorHoverColor: \"#f8bd19\",\n          anchorBgColor: \"\",\n          anchorBgHoverColor: \"#f8bd19\",\n        },\n        data: data\n      }\n    });\n    heightChart.render();\n  }\n\n  // Loads all logs and saves them to this.state.logs.\n  loadLogs = () => {\n    MedLogAPI.getLogs()\n      .then(res => {\n        this.setState({ logs: res.data });\n        console.log(\"here are the logs\", this.state.logs);\n        const data = this.state.logs.map(log => { return { label: log.date, value: log.heightIn } });\n        console.log(data);\n        this.loadHeightChart(data);\n      })\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <Typography gutterBottom variant=\"headline\" component=\"h2\" className={classes.typography}>\n          Height Chart\n        </Typography>\n        <Card className={this.props.classes.root}>\n          <div id='heightContainer'></div>\n        </Card>\n      </div>\n    );\n  }\n}\n\n\nexport default withStyles(styles)(ChartsHeight);\n\n"]},"metadata":{},"sourceType":"module"}