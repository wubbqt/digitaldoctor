{"ast":null,"code":"var _jsxFileName = \"/Users/fadialexander/Desktop/digitaldoctor/client/src/containers/SymptomJournal/SymptomJournal.js\";\nimport React, { Component } from \"react\";\nimport NavBar from '../../Components/AppBar';\nimport SymptomTextFields from './SymptomForm';\nimport SymptomList from './SymptomList';\nimport SymptomAPI from '../../utils/SymptomAPI';\nimport { withStyles } from 'material-ui/styles';\nimport Typography from 'material-ui/Typography';\nimport Grid from 'material-ui/Grid';\nimport Sidebar from '../../Components/Sidebar';\n\nconst styles = theme => ({\n  button: {\n    marginTop: 10,\n    marginBottom: 5,\n    padding: 10,\n    backgroundColor: '#007AC1',\n    color: 'white'\n  },\n  appFrame: {\n    zIndex: 1,\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    width: '100%'\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: '#86BBD8',\n    padding: theme.spacing.unit * 3\n  }\n});\n\nclass SymptomJournal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      symptomType: \"\",\n      symptomDay: \"\",\n      symptomTime: \"\",\n      symptomInfo: \"\",\n      symptoms: [],\n      symptomTypeError: \"\",\n      symptomDayError: \"\",\n      symptomTimeError: \"\",\n      symptomInfoError: \"\",\n      formSuccessMessage: \"\"\n    };\n\n    this.loadSymptoms = () => {\n      SymptomAPI.getSymptoms().then(res => this.setState({\n        symptoms: res.data,\n        symptomDay: \"\",\n        symptomTime: \"\",\n        symptomInfo: \"\"\n      })).catch(err => console.log(err));\n    };\n\n    this.deleteSymptom = id => {\n      SymptomAPI.deleteSymptom(id).then(res => this.loadSymptoms()).catch(err => console.log(err));\n    };\n\n    this.handleSymptomTypeChange = event => {\n      this.setState({\n        symptomType: event.target.value,\n        symptomTypeError: '',\n        formSuccessMessage: ''\n      });\n    };\n\n    this.handleSymptomDayChange = event => {\n      this.setState({\n        symptomDay: event.target.value,\n        symptomDayError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleSymptomTimeChange = event => {\n      this.setState({\n        symptomTime: event.target.value,\n        symptomTimeError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleSymptomInfoChange = event => {\n      this.setState({\n        symptomInfo: event.target.value,\n        symptomInfoError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.symptomType === \"\") {\n        this.setState({\n          symptomTypeError: \"Select a symptom from the drop-down list.\"\n        });\n      }\n\n      if (this.state.symptomDay === \"\" || this.state.symptomDay === \"mm/dd/yyy\") {\n        this.setState({\n          symptomDayError: \"Use the date picker to select the day when the symptom occurred.\"\n        });\n      }\n\n      if (this.state.symptomTime === \"\") {\n        this.setState({\n          symptomTimeError: \"Use the time picker to select the time when the symptom occurred using the HH:MM AM/PM format.\"\n        });\n      }\n\n      if (this.state.symptomInfo === \"\") {\n        this.setState({\n          symptomInfoError: \"Enter any additonal information about the symptom. If you don't have any other information, type N/A for this field.\"\n        });\n      } else {\n        SymptomAPI.saveSymptom({\n          symptomType: this.state.symptomType,\n          symptomDate: this.state.symptomDay,\n          symptomTime: this.state.symptomTime,\n          symptomInfo: this.state.symptomInfo\n        }).then(res => this.loadSymptoms()).catch(err => console.log(err));\n        this.setState({\n          formSuccessMessage: \"\".concat(this.state.symptomType, \" from \").concat(this.state.symptomDay, \" added successfully!\")\n        });\n        document.getElementById('symptom-form').reset();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.loadSymptoms();\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return [React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.appFrame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      className: classes.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 24,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"display1\",\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"My symptom journal\"))), React.createElement(\"div\", {\n      className: \"main-content-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(SymptomTextFields, {\n      handleFormSubmit: this.handleFormSubmit,\n      handleSymptomTypeChange: this.handleSymptomTypeChange,\n      handleSymptomDayChange: this.handleSymptomDayChange,\n      handleSymptomTimeChange: this.handleSymptomTimeChange,\n      handleSymptomInfoChange: this.handleSymptomInfoChange,\n      symptomTypeError: this.state.symptomTypeError,\n      symptomDayError: this.state.symptomDayError,\n      symptomTimeError: this.state.symptomTimeError,\n      symptomInfoError: this.state.symptomInfoError,\n      formSuccessMessage: this.state.formSuccessMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, this.state.symptoms.map(symptom => {\n      return React.createElement(SymptomList, {\n        id: symptom._id,\n        key: symptom._id,\n        type: symptom.symptomType,\n        date: symptom.symptomDate,\n        time: symptom.symptomTime,\n        info: symptom.symptomInfo,\n        deleteSymptom: this.deleteSymptom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      });\n    })))))))];\n  }\n\n} // Exporting the SymptomJournal component\n// so that the App.js file can render the My Symptom Journal page.\n\n\nexport default withStyles(styles)(SymptomJournal);","map":{"version":3,"sources":["/Users/fadialexander/Desktop/digitaldoctor/client/src/containers/SymptomJournal/SymptomJournal.js"],"names":["React","Component","NavBar","SymptomTextFields","SymptomList","SymptomAPI","withStyles","Typography","Grid","Sidebar","styles","theme","button","marginTop","marginBottom","padding","backgroundColor","color","appFrame","zIndex","overflow","position","display","width","content","flexGrow","spacing","unit","SymptomJournal","state","symptomType","symptomDay","symptomTime","symptomInfo","symptoms","symptomTypeError","symptomDayError","symptomTimeError","symptomInfoError","formSuccessMessage","loadSymptoms","getSymptoms","then","res","setState","data","catch","err","console","log","deleteSymptom","id","handleSymptomTypeChange","event","target","value","handleSymptomDayChange","handleSymptomTimeChange","handleSymptomInfoChange","handleFormSubmit","preventDefault","saveSymptom","symptomDate","document","getElementById","reset","componentDidMount","render","classes","props","map","symptom","_id"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from '../../Components/AppBar';\nimport SymptomTextFields from './SymptomForm';\nimport SymptomList from './SymptomList';\nimport SymptomAPI from '../../utils/SymptomAPI';\nimport { withStyles } from 'material-ui/styles';\nimport Typography from 'material-ui/Typography';\nimport Grid from 'material-ui/Grid';\nimport Sidebar from '../../Components/Sidebar';\n\n\nconst styles = theme => ({\n  button: {\n    marginTop: 10,\n    marginBottom: 5,\n    padding: 10,\n    backgroundColor: '#007AC1',\n    color: 'white',\n  },\n  appFrame: {\n    zIndex: 1,\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    width: '100%',\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: '#86BBD8',\n    padding: theme.spacing.unit * 3,\n  },\n});\n\nclass SymptomJournal extends Component {\n  state = {\n    symptomType: \"\",\n    symptomDay: \"\",\n    symptomTime: \"\",\n    symptomInfo: \"\",\n    symptoms: [],\n    symptomTypeError: \"\",\n    symptomDayError: \"\",\n    symptomTimeError: \"\",\n    symptomInfoError: \"\",\n    formSuccessMessage: \"\",\n  };\n\n  componentDidMount() {\n    this.loadSymptoms();\n  }\n\n  loadSymptoms = () => {\n    SymptomAPI.getSymptoms()\n      .then(res =>\n        this.setState({ symptoms: res.data, symptomDay: \"\", symptomTime: \"\", symptomInfo: \"\" })\n      )\n      .catch(err => console.log(err));\n  };\n\n  deleteSymptom = id => {\n    SymptomAPI.deleteSymptom(id)\n      .then(res => this.loadSymptoms())\n      .catch(err => console.log(err));\n  };\n\n\n  handleSymptomTypeChange = (event) => {\n    this.setState({ \n      symptomType: event.target.value,\n      symptomTypeError: '',\n      formSuccessMessage: '',\n    });\n  }\n\n  handleSymptomDayChange = (event) => {\n    this.setState({ \n      symptomDay: event.target.value,\n      symptomDayError: \"\",\n      formSuccessMessage: \"\",\n    });\n  }\n\n  handleSymptomTimeChange = (event) => {\n    this.setState({ \n      symptomTime: event.target.value,\n      symptomTimeError: \"\",\n      formSuccessMessage: \"\",\n    });\n  }\n\n  handleSymptomInfoChange = (event) => {\n    this.setState({ \n      symptomInfo: event.target.value,\n      symptomInfoError: \"\",\n      formSuccessMessage: \"\",\n    });\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n\n    if (this.state.symptomType === \"\") {\n      this.setState({\n        symptomTypeError: \"Select a symptom from the drop-down list.\"\n      })\n    }\n\n    if (this.state.symptomDay === \"\" || this.state.symptomDay === \"mm/dd/yyy\") {\n      this.setState({\n        symptomDayError: \"Use the date picker to select the day when the symptom occurred.\"\n      })\n    }\n\n    if (this.state.symptomTime === \"\") {\n      this.setState({\n        symptomTimeError: \"Use the time picker to select the time when the symptom occurred using the HH:MM AM/PM format.\"\n      })\n    }\n\n    if (this.state.symptomInfo === \"\") {\n      this.setState({\n        symptomInfoError: \"Enter any additonal information about the symptom. If you don't have any other information, type N/A for this field.\"\n      })\n    }\n\n    else {\n      SymptomAPI.saveSymptom({\n        symptomType: this.state.symptomType,\n        symptomDate: this.state.symptomDay,\n        symptomTime: this.state.symptomTime,\n        symptomInfo: this.state.symptomInfo\n      })\n        .then(res => this.loadSymptoms())\n        .catch(err => console.log(err));\n\n      this.setState({\n          formSuccessMessage: `${this.state.symptomType} from ${this.state.symptomDay} added successfully!`,\n      });\n\n      document.getElementById('symptom-form').reset();\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n    return [\n      <NavBar />,\n      <div className={classes.appFrame}>\n        <Sidebar />\n        <main className={classes.content}>\n          <div style={{ padding: 70 }}>\n            <Grid container spacing={24}>\n              <Grid item xs={12}>\n                <Typography variant=\"display1\" align=\"left\">\n                  My symptom journal\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <div className=\"main-content-section\">\n              <Grid container spacing={16}>\n                <Grid item xs={12} sm={12} md={6}>\n                  <SymptomTextFields\n                    handleFormSubmit = {this.handleFormSubmit}\n                    handleSymptomTypeChange = {this.handleSymptomTypeChange}\n                    handleSymptomDayChange = {this.handleSymptomDayChange}\n                    handleSymptomTimeChange = {this.handleSymptomTimeChange}\n                    handleSymptomInfoChange = {this.handleSymptomInfoChange}\n                    symptomTypeError = {this.state.symptomTypeError}\n                    symptomDayError = {this.state.symptomDayError}\n                    symptomTimeError = {this.state.symptomTimeError}\n                    symptomInfoError = {this.state.symptomInfoError}\n                    formSuccessMessage = {this.state.formSuccessMessage} />\n                </Grid>  \n\n                <Grid item xs={12} sm={12} md={6}>\n                  {this.state.symptoms.map(symptom => {\n                    return (\n                      <SymptomList\n                        id={symptom._id}\n                        key={symptom._id}\n                        type={symptom.symptomType}\n                        date={symptom.symptomDate}\n                        time={symptom.symptomTime}\n                        info={symptom.symptomInfo}\n                        deleteSymptom = {this.deleteSymptom}/>\n                    );\n                  })}  \n                </Grid>\n              </Grid>\n            </div>\n          </div>\n        </main>\n      </div>\n    ];\n  }\n}\n\n// Exporting the SymptomJournal component\n// so that the App.js file can render the My Symptom Journal page.\nexport default withStyles(styles)(SymptomJournal);\n"]},"metadata":{},"sourceType":"module"}