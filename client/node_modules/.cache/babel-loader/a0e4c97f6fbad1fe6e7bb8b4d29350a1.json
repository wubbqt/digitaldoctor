{"ast":null,"code":"var _jsxFileName = \"/Users/fadialexander/Desktop/digitaldoctor/client/src/containers/MedLog/MedLog.js\";\n// Importing React since we are using React.\nimport React, { Component } from \"react\"; // Importing Navbar component.\n\nimport NavBar from '../../Components/AppBar'; // Import LogForm\n\nimport LogForm from './LogForm'; // Import LogList\n\nimport LogList from './LogList'; // Import API\n\nimport MedLogAPI from '../../utils/MedLogAPI';\nimport DoctorsAPI from '../../utils/DoctorsAPI'; // Import style and UI components from material-ui-next\n\nimport { withStyles } from 'material-ui/styles';\nimport Typography from 'material-ui/Typography';\nimport Grid from 'material-ui/Grid'; // Import Sidebar component.\n\nimport Sidebar from '../../Components/Sidebar'; // Style/Theme\n\nconst styles = theme => ({\n  appFrame: {\n    zIndex: 1,\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    width: '100%'\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: '#86BBD8',\n    padding: theme.spacing.unit * 3\n  }\n});\n\nclass MedLog extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      logDoctor: \"\",\n      logDate: \"\",\n      logVisitReason: \"\",\n      logHeight: \"\",\n      logWeight: \"\",\n      logNotes: \"\",\n      logs: [],\n      doctors: [],\n      logDoctorError: \"\",\n      logDateError: \"\",\n      logVisitReasonError: \"\",\n      logHeightError: \"\",\n      logWeightError: \"\",\n      logNotesError: \"\",\n      formSuccessMessage: \"\"\n    };\n\n    this.loadLogs = () => {\n      MedLogAPI.getLogs().then(res => this.setState({\n        logs: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.deleteLog = id => {\n      MedLogAPI.deleteLog(id).then(res => this.loadLogs()).catch(err => console.log(err));\n    };\n\n    this.loadDoctors = () => {\n      DoctorsAPI.getDoctors().then(res => this.setState({\n        doctors: res.data\n      })).catch(err => console.log('getting doctors did not work: ', err));\n    };\n\n    this.handleLogDoctorChange = event => {\n      this.setState({\n        logDoctor: event.target.value,\n        logDoctorError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleLogDateChange = event => {\n      this.setState({\n        logDate: event.target.value,\n        logDateError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleLogVisitReasonChange = event => {\n      this.setState({\n        logVisitReason: event.target.value,\n        logVisitReasonError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleLogHeightChange = event => {\n      this.setState({\n        logHeight: event.target.value,\n        logHeightError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleLogWeightChange = event => {\n      this.setState({\n        logWeight: event.target.value,\n        logWeightError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleLogNotesChange = event => {\n      this.setState({\n        logNotes: event.target.value,\n        logNotesError: \"\",\n        formSuccessMessage: \"\"\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault(); // If select doctor field is empty when user submits form, show error.\n\n      if (this.state.logDoctor === \"\") {\n        this.setState({\n          logDoctorError: \"Select a doctor from the drop-down list.\"\n        });\n      } // If the log date field is empty when user submits form, show error.\n\n\n      if (this.state.logDate === \"\" || this.state.logDate === \"mm/dd/yyy\") {\n        this.setState({\n          logDateError: \"Use the date picker to select the date of the doctor visit.\"\n        });\n      } // if the visit reason field is empty when user submits form, show error.\n\n\n      if (this.state.logVisitReason === \"\") {\n        this.setState({\n          logVisitReasonError: \"Specify the reason for visiting.\"\n        });\n      } // if the height field is empty when user submits form, show error.\n\n\n      if (this.state.logHeight === \"\") {\n        this.setState({\n          logHeightError: \"Enter a value for height (in inches).\"\n        });\n      } // if the weight field is empty when user submits form, show error.\n\n\n      if (this.state.logWeight === \"\") {\n        this.setState({\n          logWeightError: \"Enter a value for weight (in pounds).\"\n        });\n      } // if the visit notes field is empty when user submits form, show error.\n\n\n      if (this.state.logNotes === \"\") {\n        this.setState({\n          logNotesError: \"Enter any additional notes to associate with this doctor visit. If you don't have any additional notes to record, type N/A.\"\n        });\n      } else {\n        //Save symptom to database if all fields are filled out.\n        // Show form success message to user.\n        MedLogAPI.saveLog({\n          date: this.state.logDate,\n          doctor: this.state.logDoctor,\n          visitPurpose: this.state.logVisitReason,\n          heightIn: this.state.logHeight,\n          weightLb: this.state.logWeight,\n          notes: this.state.logNotes\n        }).then(res => this.loadLogs()).catch(err => console.log(err));\n        this.setState({\n          formSuccessMessage: \"Doctor notes from \".concat(this.state.logDate, \" added successfully!\")\n        }); // Clear form\n\n        document.getElementById('log-form').reset();\n      }\n    };\n  }\n\n  // When the component mounts, load all logs and save them to this.state.logs.\n  // When the component mounts, load all doctors and save them to this.state.doctors.\n  componentDidMount() {\n    this.loadLogs();\n    this.loadDoctors();\n  } // Loads all logs and saves them to this.state.logs.\n\n\n  render() {\n    const classes = this.props.classes;\n    return [React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.appFrame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      className: classes.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 24,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"display1\",\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"My health log\"))), React.createElement(\"div\", {\n      className: \"main-content-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(LogForm, {\n      doctors: this.state.doctors,\n      handleFormSubmit: this.handleFormSubmit,\n      handleLogDateChange: this.handleLogDateChange,\n      handleLogDoctorChange: this.handleLogDoctorChange,\n      handleLogVisitReasonChange: this.handleLogVisitReasonChange,\n      handleLogHeightChange: this.handleLogHeightChange,\n      handleLogWeightChange: this.handleLogWeightChange,\n      handleLogNotesChange: this.handleLogNotesChange,\n      logDoctorError: this.state.logDoctorError,\n      logDateError: this.state.logDateError,\n      logVisitReasonError: this.state.logVisitReasonError,\n      logHeightError: this.state.logHeightError,\n      logWeightError: this.state.logWeightError,\n      logNotesError: this.state.logNotesError,\n      formSuccessMessage: this.state.formSuccessMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, this.state.logs.map(log => {\n      return React.createElement(LogList, {\n        id: log._id,\n        key: log._id,\n        date: log.date,\n        doctor: log.doctor,\n        visitPurpose: log.visitPurpose,\n        heightIn: log.heightIn,\n        weightLb: log.weightLb,\n        visitNotes: log.notes,\n        deleteLog: this.deleteLog,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      });\n    })))))))];\n  }\n\n} // Exporting the MedLog component so that the App.js file can use/render the My health log page.\n\n\nexport default withStyles(styles)(MedLog);","map":{"version":3,"sources":["/Users/fadialexander/Desktop/digitaldoctor/client/src/containers/MedLog/MedLog.js"],"names":["React","Component","NavBar","LogForm","LogList","MedLogAPI","DoctorsAPI","withStyles","Typography","Grid","Sidebar","styles","theme","appFrame","zIndex","overflow","position","display","width","content","flexGrow","backgroundColor","padding","spacing","unit","MedLog","state","logDoctor","logDate","logVisitReason","logHeight","logWeight","logNotes","logs","doctors","logDoctorError","logDateError","logVisitReasonError","logHeightError","logWeightError","logNotesError","formSuccessMessage","loadLogs","getLogs","then","res","setState","data","catch","err","console","log","deleteLog","id","loadDoctors","getDoctors","handleLogDoctorChange","event","target","value","handleLogDateChange","handleLogVisitReasonChange","handleLogHeightChange","handleLogWeightChange","handleLogNotesChange","handleFormSubmit","preventDefault","saveLog","date","doctor","visitPurpose","heightIn","weightLb","notes","document","getElementById","reset","componentDidMount","render","classes","props","map","_id"],"mappings":"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","sourcesContent":["// Importing React since we are using React.\nimport React, { Component } from \"react\";\n// Importing Navbar component.\nimport NavBar from '../../Components/AppBar';\n// Import LogForm\nimport LogForm from './LogForm';\n// Import LogList\nimport LogList from './LogList';\n// Import API\nimport MedLogAPI from '../../utils/MedLogAPI';\nimport DoctorsAPI from '../../utils/DoctorsAPI';\n// Import style and UI components from material-ui-next\nimport { withStyles } from 'material-ui/styles';\nimport Typography from 'material-ui/Typography';\nimport Grid from 'material-ui/Grid';\n// Import Sidebar component.\nimport Sidebar from '../../Components/Sidebar';\n\n// Style/Theme\nconst styles = theme => ({\n  appFrame: {\n    zIndex: 1,\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    width: '100%',\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: '#86BBD8',\n    padding: theme.spacing.unit * 3,\n  },\n});\n\n\nclass MedLog extends Component {\n  state = {\n    logDoctor: \"\",\n    logDate: \"\",\n    logVisitReason: \"\",\n    logHeight: \"\",\n    logWeight: \"\",\n    logNotes: \"\",\n    logs: [],\n    doctors: [],\n    logDoctorError: \"\",\n    logDateError: \"\",\n    logVisitReasonError: \"\",\n    logHeightError: \"\",\n    logWeightError: \"\",\n    logNotesError: \"\",\n    formSuccessMessage: \"\",\n  };\n\n  // When the component mounts, load all logs and save them to this.state.logs.\n  // When the component mounts, load all doctors and save them to this.state.doctors.\n  componentDidMount() {\n    this.loadLogs();\n    this.loadDoctors();\n  }\n\n  // Loads all logs and saves them to this.state.logs.\n  loadLogs = () => {\n    MedLogAPI.getLogs()\n      .then(res =>\n        this.setState({ logs: res.data })\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a log from the database with a given id, then reloads logs from the db\n  deleteLog = id => {\n    MedLogAPI.deleteLog(id)\n      .then(res => this.loadLogs())\n      .catch(err => console.log(err));\n  };\n\n  //Loads all doctors and saves them to this.state.doctors.\n  loadDoctors = () => {\n    DoctorsAPI.getDoctors()\n      .then(res =>\n        this.setState({ doctors: res.data })\n      )\n      .catch(err => console.log('getting doctors did not work: ', err));\n  };\n\n  // Keep track of what user selects from doctor drop-down list so that input can be grabbed later\n    // If form validation error is showing, remove error from page when user starts typing.\n  handleLogDoctorChange = (event) => {\n    this.setState({ \n      logDoctor: event.target.value,\n      logDoctorError: \"\",\n      formSuccessMessage: \"\",\n    });\n  }\n\n  // Keep track of what user enters into the log day input field so that input can be grabbed later.\n  // If form validation error is showing, remove error from page when user starts typing.\n  handleLogDateChange = (event) => {\n    this.setState({ \n      logDate: event.target.value,\n      logDateError: \"\",\n      formSuccessMessage: \"\",\n    });\n  }\n\n  // Keep track of what user types into reason for visit input field so that input can be grabbed later.\n  // If form validation error is showing, remove error from page when user starts typing.\n  handleLogVisitReasonChange = (event) => {\n    this.setState({ \n      logVisitReason: event.target.value,\n      logVisitReasonError: \"\",\n      formSuccessMessage: \"\", \n    });\n  }\n\n  // Keep track of what user types into height input field so that input can be grabbed later.\n  // If form validation error is showing, remove error from page when user starts typing.\n  handleLogHeightChange = (event) => {\n    this.setState({ \n      logHeight: event.target.value,\n      logHeightError: \"\",\n      formSuccessMessage: \"\", \n    });\n  }\n\n  // Keep track of what user types into weight input field so that input can be grabbed later.\n  // If form validation error is showing, remove error from page when user starts typing.\n  handleLogWeightChange = (event) => {\n    this.setState({ \n      logWeight: event.target.value,\n      logWeightError: \"\",\n      formSuccessMessage: \"\",\n    });\n  }\n\n  // Keep track of what user types into notes input field so that input can be grabbed later\n  // If form validation error is showing, remove error from page when user starts typing.\n  handleLogNotesChange = (event) => {\n    this.setState({ \n      logNotes: event.target.value,\n      logNotesError: \"\",\n      formSuccessMessage: \"\",\n     });\n  }\n\n  // When user submits health log form, save health log inforation to database.\n  handleFormSubmit = event => {\n    event.preventDefault();\n\n    // If select doctor field is empty when user submits form, show error.\n    if (this.state.logDoctor === \"\") {\n      this.setState({\n        logDoctorError: \"Select a doctor from the drop-down list.\"\n      })\n    }\n\n    // If the log date field is empty when user submits form, show error.\n    if (this.state.logDate === \"\" || this.state.logDate === \"mm/dd/yyy\") {\n      this.setState({\n        logDateError: \"Use the date picker to select the date of the doctor visit.\"\n      })\n    }\n\n    // if the visit reason field is empty when user submits form, show error.\n    if (this.state.logVisitReason === \"\") {\n      this.setState({\n        logVisitReasonError: \"Specify the reason for visiting.\"\n      })\n    }\n\n    // if the height field is empty when user submits form, show error.\n    if (this.state.logHeight === \"\") {\n      this.setState({\n        logHeightError: \"Enter a value for height (in inches).\"\n      })\n    }\n\n    // if the weight field is empty when user submits form, show error.\n    if (this.state.logWeight === \"\") {\n      this.setState({\n        logWeightError: \"Enter a value for weight (in pounds).\"\n      })\n    }\n\n    // if the visit notes field is empty when user submits form, show error.\n    if (this.state.logNotes === \"\") {\n      this.setState({\n        logNotesError: \"Enter any additional notes to associate with this doctor visit. If you don't have any additional notes to record, type N/A.\"\n      })\n    }\n\n    else {\n      //Save symptom to database if all fields are filled out.\n      // Show form success message to user.\n      MedLogAPI.saveLog({\n        date: this.state.logDate,\n        doctor: this.state.logDoctor,\n        visitPurpose: this.state.logVisitReason,\n        heightIn: this.state.logHeight,\n        weightLb: this.state.logWeight,\n        notes: this.state.logNotes,\n      })\n        .then(res => this.loadLogs())\n        .catch(err => console.log(err));\n\n      this.setState({\n          formSuccessMessage: `Doctor notes from ${this.state.logDate} added successfully!`,\n      });\n\n      // Clear form\n      document.getElementById('log-form').reset();\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n    return [\n      <NavBar />, \n      <div className={classes.appFrame}>\n        <Sidebar />\n          <main className={classes.content}>\n            <div style={{ padding: 70 }}>\n              <Grid container spacing={24}>\n                <Grid item xs={12}>\n                  <Typography variant=\"display1\" align=\"left\">\n                    My health log\n                  </Typography>\n                </Grid>\n              </Grid>\n             \n              <div className=\"main-content-section\">\n                <Grid container spacing={16}>\n                  <Grid item xs={12} sm={12} md={6}>\n                    <LogForm\n                      doctors={this.state.doctors}\n                      handleFormSubmit={this.handleFormSubmit}\n                      handleLogDateChange={this.handleLogDateChange}\n                      handleLogDoctorChange={this.handleLogDoctorChange}\n                      handleLogVisitReasonChange={this.handleLogVisitReasonChange}\n                      handleLogHeightChange={this.handleLogHeightChange}\n                      handleLogWeightChange={this.handleLogWeightChange}\n                      handleLogNotesChange={this.handleLogNotesChange}\n                      logDoctorError={this.state.logDoctorError}\n                      logDateError = {this.state.logDateError}\n                      logVisitReasonError = {this.state.logVisitReasonError}\n                      logHeightError = {this.state.logHeightError}\n                      logWeightError = {this.state.logWeightError}\n                      logNotesError = {this.state.logNotesError}\n                      formSuccessMessage = {this.state.formSuccessMessage} />\n                  </Grid>\n                      \n                  <Grid item xs={12} sm={12} md={6}>\n                    {this.state.logs.map(log => {\n                      return (\n                        <LogList\n                          id={log._id}\n                          key={log._id}\n                          date={log.date}\n                          doctor={log.doctor}\n                          visitPurpose={log.visitPurpose}\n                          heightIn={log.heightIn}\n                          weightLb={log.weightLb}\n                          visitNotes={log.notes}\n                          deleteLog={this.deleteLog}\n                        />\n                      );\n                    })}  \n                  </Grid>\n                </Grid>\n              </div>\n          </div>\n        </main>\n      </div>,\n    ];\n  }\n}\n\n// Exporting the MedLog component so that the App.js file can use/render the My health log page.\nexport default withStyles(styles)(MedLog);\n"]},"metadata":{},"sourceType":"module"}