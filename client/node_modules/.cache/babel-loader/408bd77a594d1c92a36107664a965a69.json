{"ast":null,"code":"var _jsxFileName = \"/Users/fadialexander/Desktop/digitaldoctor/client/src/containers/DoctorsList/DoctorsList.js\";\nimport React, { Component } from \"react\";\nimport NavBar from '../../Components/AppBar';\nimport DoctorForm from './DoctorForm';\nimport DoctorInfo from './DoctorInfo';\nimport ClinicInfo from './ClinicInfo';\nimport ClinicForm from './ClinicForm';\nimport DoctorsAPI from '../../utils/DoctorsAPI';\nimport ClinicsAPI from '../../utils/ClinicsAPI';\nimport { withStyles } from 'material-ui/styles';\nimport Paper from 'material-ui/Paper';\nimport Typography from 'material-ui/Typography';\nimport Grid from 'material-ui/Grid';\nimport Sidebar from '../../Components/Sidebar';\n\nconst styles = theme => ({\n  root: theme.mixins.gutters({\n    paddingTop: 16,\n    paddingBottom: 16,\n    display: 'flex',\n    flexWrap: 'wrap'\n  }),\n  appFrame: {\n    zIndex: 1,\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    width: '100%'\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: '#86BBD8',\n    padding: theme.spacing.unit * 3\n  },\n  doctorClinicList: {\n    borderStyle: 'solid',\n    borderWidth: 4,\n    borderColor: '#33658A'\n  },\n  clinicSection: {\n    marginTop: 45\n  }\n});\n\nclass DoctorList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      doctorFirstName: \"\",\n      doctorLastName: \"\",\n      doctorClinic: \"\",\n      doctorPhone: \"\",\n      doctors: [],\n      clinicName: \"\",\n      clinicAddress: \"\",\n      clinicCity: \"\",\n      clinicState: \"\",\n      clinicZip: \"\",\n      clinicPhone: \"\",\n      clinics: [],\n      doctorFirstNameError: \"\",\n      doctorLastNameError: \"\",\n      doctorClinicError: \"\",\n      doctorPhoneError: \"\",\n      clinicNameError: \"\",\n      clinicAddressError: \"\",\n      clinicCityError: \"\",\n      clinicStateError: \"\",\n      clinicZipError: \"\",\n      clinicPhoneError: \"\",\n      doctorFormSuccessMessage: \"\",\n      clinicFormSuccessMessage: \"\"\n    };\n\n    this.loadDoctors = () => {\n      DoctorsAPI.getDoctors().then(res => this.setState({\n        doctors: res.data\n      })).catch(err => console.log('there is an issue loading doctors: ' + err));\n    };\n\n    this.loadClinics = () => {\n      ClinicsAPI.getClinics().then(res => this.setState({\n        clinics: res.data\n      })).catch(err => console.log('there is an issue loading doctors: ' + err));\n    };\n\n    this.deleteDoctor = id => {\n      DoctorsAPI.deleteDoctor(id).then(res => this.loadDoctors()).catch(err => console.log(err));\n    };\n\n    this.deleteClinic = id => {\n      ClinicsAPI.deleteClinic(id).then(res => this.loadClinics()).catch(err => console.log(err));\n    };\n\n    this.handleDoctorFirstNameChange = event => {\n      this.setState({\n        doctorFirstName: event.target.value,\n        doctorFirstNameError: \"\",\n        doctorFormSuccessMessage: \"\"\n      });\n    };\n\n    this.handleDoctorLastNameChange = event => {\n      this.setState({\n        doctorLastName: event.target.value,\n        doctorLastNameError: \"\",\n        doctorFormSuccessMessage: \"\"\n      });\n    };\n\n    this.handleDoctorClinicChange = event => {\n      this.setState({\n        doctorClinic: event.target.value,\n        doctorClinicError: \"\",\n        doctorFormSuccessMessage: \"\"\n      });\n    };\n\n    this.handleDoctorPhoneChange = event => {\n      this.setState({\n        doctorPhone: event.target.value,\n        doctorPhoneError: \"\",\n        doctorFormSuccessMessage: \"\"\n      });\n    };\n\n    this.handleClinicNameChange = event => {\n      this.setState({\n        clinicName: event.target.value,\n        clinicNameError: \"\",\n        clinicFormSuccessMessage: \"\"\n      });\n    };\n\n    this.handleClinicAddressChange = event => {\n      this.setState({\n        clinicAddress: event.target.value,\n        clinicAddressError: \"\",\n        clinicFormSuccessMessage: \"\"\n      });\n    };\n\n    this.handleClinicCityChange = event => {\n      this.setState({\n        clinicCity: event.target.value,\n        clinicCityError: \"\",\n        clinicFormSuccessMessage: \"\"\n      });\n    };\n\n    this.handleClinicStateChange = event => {\n      this.setState({\n        clinicState: event.target.value,\n        clinicStateError: \"\",\n        clinicFormSuccessMessage: \"\"\n      });\n    };\n\n    this.handleClinicZipChange = event => {\n      this.setState({\n        clinicZip: event.target.value,\n        clinicZipError: \"\",\n        clinicFormSuccessMessage: \"\"\n      });\n    };\n\n    this.handleClinicPhoneChange = event => {\n      this.setState({\n        clinicPhone: event.target.value,\n        clinicPhoneError: \"\",\n        clinicFormSuccessMessage: \"\"\n      });\n    };\n\n    this.handleDoctorFormSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.doctorFirstName === \"\") {\n        this.setState({\n          doctorFirstNameError: \"First name is required.\"\n        });\n      }\n\n      if (this.state.doctorLastName === \"\") {\n        this.setState({\n          doctorLastNameError: \"Last name is required.\"\n        });\n      }\n\n      if (this.state.doctorClinic === \"\") {\n        this.setState({\n          doctorClinicError: \"From the drop-down list, select the primary clinic that the doctor is associated with.\"\n        });\n      }\n\n      if (this.state.doctorPhone === \"\") {\n        this.setState({\n          doctorPhoneError: \"Phone number is required.\"\n        });\n      } else {\n        DoctorsAPI.saveDoctor({\n          firstname: this.state.doctorFirstName,\n          lastname: this.state.doctorLastName,\n          clinic: this.state.doctorClinic,\n          phone: this.state.doctorPhone\n        }).then(res => this.loadDoctors()).catch(err => console.log('there is a problem saving doctor: ' + err));\n        this.setState({\n          doctorFormSuccessMessage: \"Dr. \".concat(this.state.doctorFirstName, \" \").concat(this.state.doctorLastName, \" added successfully!\")\n        });\n        document.getElementById('doctor-form').reset();\n      }\n    };\n\n    this.handleClinicFormSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.clinicName === \"\") {\n        this.setState({\n          clinicNameError: \"Name is required.\"\n        });\n      }\n\n      if (this.state.clinicAddress === \"\") {\n        this.setState({\n          clinicAddressError: \"Address is required.\"\n        });\n      }\n\n      if (this.state.clinicCity === \"\") {\n        this.setState({\n          clinicCityError: \"City is required.\"\n        });\n      }\n\n      if (this.state.clinicState === \"\") {\n        this.setState({\n          clinicStateError: \"State is required.\"\n        });\n      }\n\n      if (this.state.clinicZip === \"\") {\n        this.setState({\n          clinicZipError: \"Zip code is required.\"\n        });\n      }\n\n      if (this.state.clinicPhone === \"\") {\n        this.setState({\n          clinicPhoneError: \"Phone number is required.\"\n        });\n      } else {\n        ClinicsAPI.saveClinic({\n          clinicname: this.state.clinicName,\n          address: this.state.clinicAddress,\n          city: this.state.clinicCity,\n          state: this.state.clinicState,\n          zip: this.state.clinicZip,\n          phone: this.state.clinicPhone\n        }).then(res => this.loadClinics()).catch(err => console.log('there is a problem saving doctor: ' + err));\n        this.setState({\n          clinicFormSuccessMessage: \"\".concat(this.state.clinicName, \" added successfully!\")\n        });\n        document.getElementById('clinic-form').reset();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.loadDoctors();\n    this.loadClinics();\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return [React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.appFrame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      className: classes.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 24,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"display1\",\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"Doctors and clinics\"))), React.createElement(\"div\", {\n      className: \"main-content-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(DoctorForm, {\n      clinics: this.state.clinics,\n      handleDoctorFormSubmit: this.handleDoctorFormSubmit,\n      handleDoctorFirstNameChange: this.handleDoctorFirstNameChange,\n      handleDoctorLastNameChange: this.handleDoctorLastNameChange,\n      handleDoctorClinicChange: this.handleDoctorClinicChange,\n      handleDoctorPhoneChange: this.handleDoctorPhoneChange,\n      doctorFirstNameError: this.state.doctorFirstNameError,\n      doctorLastNameError: this.state.doctorLastNameError,\n      doctorClinicError: this.state.doctorClinicError,\n      doctorPhoneError: this.state.doctorPhoneError,\n      doctorFormSuccessMessage: this.state.doctorFormSuccessMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      elevation: 4,\n      className: classes.doctorClinicList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      gutterBottom: true,\n      variant: \"headline\",\n      component: \"h2\",\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"Doctors list\"), this.state.doctors.map(doctor => {\n      return React.createElement(DoctorInfo, {\n        id: doctor._id,\n        key: doctor._id,\n        doctorFirstName: doctor.firstname,\n        doctorLastName: doctor.lastname,\n        doctorClinic: doctor.clinic,\n        doctorPhone: doctor.phone,\n        deleteDoctor: this.deleteDoctor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      });\n    })))), React.createElement(Grid, {\n      container: true,\n      spacing: 16,\n      className: classes.clinicSection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(ClinicForm, {\n      handleClinicFormSubmit: this.handleClinicFormSubmit,\n      handleClinicNameChange: this.handleClinicNameChange,\n      handleClinicAddressChange: this.handleClinicAddressChange,\n      handleClinicCityChange: this.handleClinicCityChange,\n      handleClinicStateChange: this.handleClinicStateChange,\n      handleClinicZipChange: this.handleClinicZipChange,\n      handleClinicPhoneChange: this.handleClinicPhoneChange,\n      clinicNameError: this.state.clinicNameError,\n      clinicAddressError: this.state.clinicAddressError,\n      clinicCityError: this.state.clinicCityError,\n      clinicStateError: this.state.clinicStateError,\n      clinicZipError: this.state.clinicZipError,\n      clinicPhoneError: this.state.clinicPhoneError,\n      clinicFormSuccessMessage: this.state.clinicFormSuccessMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      elevation: 4,\n      className: classes.doctorClinicList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      gutterBottom: true,\n      variant: \"headline\",\n      component: \"h2\",\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"Clinics\"), this.state.clinics.map(clinic => {\n      return React.createElement(ClinicInfo, {\n        id: clinic._id,\n        key: clinic._id,\n        clinicName: clinic.clinicname,\n        clinicAddress: clinic.address,\n        clinicCity: clinic.city,\n        clinicState: clinic.state,\n        clinicZip: clinic.zip,\n        clinicPhone: clinic.phone,\n        deleteClinic: this.deleteClinic,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      });\n    })))))))))];\n  }\n\n}\n\nexport default withStyles(styles)(DoctorList);","map":{"version":3,"sources":["/Users/fadialexander/Desktop/digitaldoctor/client/src/containers/DoctorsList/DoctorsList.js"],"names":["React","Component","NavBar","DoctorForm","DoctorInfo","ClinicInfo","ClinicForm","DoctorsAPI","ClinicsAPI","withStyles","Paper","Typography","Grid","Sidebar","styles","theme","root","mixins","gutters","paddingTop","paddingBottom","display","flexWrap","appFrame","zIndex","overflow","position","width","content","flexGrow","backgroundColor","padding","spacing","unit","doctorClinicList","borderStyle","borderWidth","borderColor","clinicSection","marginTop","DoctorList","state","doctorFirstName","doctorLastName","doctorClinic","doctorPhone","doctors","clinicName","clinicAddress","clinicCity","clinicState","clinicZip","clinicPhone","clinics","doctorFirstNameError","doctorLastNameError","doctorClinicError","doctorPhoneError","clinicNameError","clinicAddressError","clinicCityError","clinicStateError","clinicZipError","clinicPhoneError","doctorFormSuccessMessage","clinicFormSuccessMessage","loadDoctors","getDoctors","then","res","setState","data","catch","err","console","log","loadClinics","getClinics","deleteDoctor","id","deleteClinic","handleDoctorFirstNameChange","event","target","value","handleDoctorLastNameChange","handleDoctorClinicChange","handleDoctorPhoneChange","handleClinicNameChange","handleClinicAddressChange","handleClinicCityChange","handleClinicStateChange","handleClinicZipChange","handleClinicPhoneChange","handleDoctorFormSubmit","preventDefault","saveDoctor","firstname","lastname","clinic","phone","document","getElementById","reset","handleClinicFormSubmit","saveClinic","clinicname","address","city","zip","componentDidMount","render","classes","props","textAlign","map","doctor","_id"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from '../../Components/AppBar';\nimport DoctorForm from './DoctorForm';\nimport DoctorInfo from './DoctorInfo';\nimport ClinicInfo from './ClinicInfo';\nimport ClinicForm from './ClinicForm';\nimport DoctorsAPI from '../../utils/DoctorsAPI';\nimport ClinicsAPI from '../../utils/ClinicsAPI';\nimport { withStyles } from 'material-ui/styles';\nimport Paper from 'material-ui/Paper';\nimport Typography from 'material-ui/Typography';\nimport Grid from 'material-ui/Grid';\nimport Sidebar from '../../Components/Sidebar';\n\nconst styles = theme => ({\n  root: theme.mixins.gutters({\n    paddingTop: 16,\n    paddingBottom: 16,\n    display: 'flex',\n    flexWrap: 'wrap',\n  }),\n  appFrame: {\n    zIndex: 1,\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    width: '100%',\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: '#86BBD8',\n    padding: theme.spacing.unit * 3,\n  },\n  doctorClinicList: {\n    borderStyle: 'solid',\n    borderWidth: 4,\n    borderColor: '#33658A',\n  },\n  clinicSection: {\n    marginTop: 45,\n  },\n});\n\nclass DoctorList extends Component {\n  state = {\n    doctorFirstName: \"\",\n    doctorLastName: \"\",\n    doctorClinic: \"\",\n    doctorPhone: \"\",\n    doctors: [],\n    clinicName: \"\",\n    clinicAddress: \"\",\n    clinicCity: \"\",\n    clinicState: \"\",\n    clinicZip: \"\",\n    clinicPhone: \"\",\n    clinics: [],\n    doctorFirstNameError: \"\",\n    doctorLastNameError: \"\",\n    doctorClinicError: \"\",\n    doctorPhoneError: \"\",\n    clinicNameError: \"\",\n    clinicAddressError: \"\",\n    clinicCityError: \"\",\n    clinicStateError: \"\",\n    clinicZipError: \"\",\n    clinicPhoneError: \"\",\n    doctorFormSuccessMessage: \"\",  \n    clinicFormSuccessMessage: \"\",  \n  };\n\n  componentDidMount() {\n    this.loadDoctors();\n    this.loadClinics();\n  }\n\n  loadDoctors = () => {\n    DoctorsAPI.getDoctors()\n      .then(res =>\n        this.setState({ doctors: res.data }))\n      .catch(err => console.log('there is an issue loading doctors: ' + err));\n  };\n\n  loadClinics = () => {\n    ClinicsAPI.getClinics()\n      .then(res =>\n        this.setState({ clinics: res.data }))\n      .catch(err => console.log('there is an issue loading doctors: ' + err));\n  };\n\n  deleteDoctor = id => {\n    DoctorsAPI.deleteDoctor(id)\n      .then(res => this.loadDoctors())\n      .catch(err => console.log(err));\n  };\n\n  deleteClinic = id => {\n    ClinicsAPI.deleteClinic(id)\n      .then(res => this.loadClinics())\n      .catch(err => console.log(err));\n  };\n\n  handleDoctorFirstNameChange = (event) => {\n    this.setState({ \n      doctorFirstName: event.target.value,\n      doctorFirstNameError: \"\",\n      doctorFormSuccessMessage: \"\",\n    });\n  }\n\n  handleDoctorLastNameChange = (event) => {\n    this.setState({ \n      doctorLastName: event.target.value,\n      doctorLastNameError: \"\",\n      doctorFormSuccessMessage: \"\",\n    });\n  }\n\n\n  handleDoctorClinicChange = (event) => {\n    this.setState({ \n      doctorClinic: event.target.value,\n      doctorClinicError: \"\",\n      doctorFormSuccessMessage: \"\",\n    });\n  }\n\n\n  handleDoctorPhoneChange = (event) => {\n    this.setState({ \n      doctorPhone: event.target.value,\n      doctorPhoneError: \"\",\n      doctorFormSuccessMessage: \"\",\n    });\n  }\n\n  handleClinicNameChange = (event) => {\n    this.setState({ \n      clinicName: event.target.value,\n      clinicNameError: \"\",\n      clinicFormSuccessMessage: \"\",\n    });\n  }\n\n  handleClinicAddressChange = (event) => {\n    this.setState({ \n      clinicAddress: event.target.value,\n      clinicAddressError: \"\",\n      clinicFormSuccessMessage: \"\",\n    });\n  }\n\n  handleClinicCityChange = (event) => {\n    this.setState({ \n      clinicCity: event.target.value,\n      clinicCityError: \"\",\n      clinicFormSuccessMessage: \"\",\n    });\n  }\n\n  handleClinicStateChange = (event) => {\n    this.setState({ \n      clinicState: event.target.value,\n      clinicStateError: \"\",\n      clinicFormSuccessMessage: \"\",\n    });\n  }\n\n  handleClinicZipChange = (event) => {\n    this.setState({ \n      clinicZip: event.target.value,\n      clinicZipError: \"\",\n      clinicFormSuccessMessage: \"\",\n    });\n  }\n\n  handleClinicPhoneChange = (event) => {\n    this.setState({ \n      clinicPhone: event.target.value,\n      clinicPhoneError: \"\",\n      clinicFormSuccessMessage: \"\",\n    });\n  }\n\n  handleDoctorFormSubmit = event => {\n    event.preventDefault();\n    if (this.state.doctorFirstName === \"\") {\n      this.setState({\n        doctorFirstNameError: \"First name is required.\"\n      })\n    }\n\n    if (this.state.doctorLastName === \"\") {\n      this.setState({\n        doctorLastNameError: \"Last name is required.\"\n      })\n    }\n\n    if (this.state.doctorClinic === \"\") {\n      this.setState({\n        doctorClinicError: \"From the drop-down list, select the primary clinic that the doctor is associated with.\"\n      })\n    }\n\n    if (this.state.doctorPhone === \"\") {\n      this.setState({\n        doctorPhoneError: \"Phone number is required.\"\n      })\n    }\n\n    else {\n      DoctorsAPI.saveDoctor({\n        firstname: this.state.doctorFirstName,\n        lastname: this.state.doctorLastName,\n        clinic: this.state.doctorClinic,\n        phone: this.state.doctorPhone,\n      })\n        .then(res => this.loadDoctors())\n        .catch(err => console.log('there is a problem saving doctor: ' + err));\n\n      this.setState({\n          doctorFormSuccessMessage: `Dr. ${this.state.doctorFirstName} ${this.state.doctorLastName} added successfully!`,\n      });\n\n      document.getElementById('doctor-form').reset();\n    }\n  };\n\n  handleClinicFormSubmit = event => {\n    event.preventDefault();\n\n    if (this.state.clinicName === \"\") {\n      this.setState({\n        clinicNameError: \"Name is required.\"\n      })\n    }\n\n    if (this.state.clinicAddress === \"\") {\n      this.setState({\n        clinicAddressError: \"Address is required.\"\n      })\n    }\n\n    if (this.state.clinicCity === \"\") {\n      this.setState({\n        clinicCityError: \"City is required.\"\n      })\n    }\n\n    if (this.state.clinicState === \"\") {\n      this.setState({\n        clinicStateError: \"State is required.\"\n      })\n    }\n\n    if (this.state.clinicZip === \"\") {\n      this.setState({\n        clinicZipError: \"Zip code is required.\"\n      })\n    }\n\n    if (this.state.clinicPhone === \"\") {\n      this.setState({\n        clinicPhoneError: \"Phone number is required.\"\n      })\n    }\n\n    else {\n      ClinicsAPI.saveClinic({\n        clinicname: this.state.clinicName,\n        address: this.state.clinicAddress,\n        city: this.state.clinicCity,\n        state: this.state.clinicState,\n        zip: this.state.clinicZip,\n        phone: this.state.clinicPhone,\n      })\n        .then(res => this.loadClinics())\n        .catch(err => console.log('there is a problem saving doctor: ' + err));\n\n        this.setState({\n          clinicFormSuccessMessage: `${this.state.clinicName} added successfully!`,\n      });\n\n      document.getElementById('clinic-form').reset();\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return [\n      <NavBar />,  \n      <div className={classes.appFrame}>\n        <Sidebar />\n        <main className={classes.content}>\n          <div style={{ padding: 70 }}>\n            <Grid container spacing={24}>\n              <Grid item xs={12}>\n                <Typography variant=\"display1\" align=\"left\">\n                  Doctors and clinics\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <div className=\"main-content-section\">\n              <Grid container spacing={16}>\n                <Grid item xs={12} sm={12} md={6}>\n                  <DoctorForm \n                    clinics = {this.state.clinics}\n                    handleDoctorFormSubmit={this.handleDoctorFormSubmit}\n                    handleDoctorFirstNameChange={this.handleDoctorFirstNameChange}\n                    handleDoctorLastNameChange={this.handleDoctorLastNameChange}\n                    handleDoctorClinicChange={this.handleDoctorClinicChange}\n                    handleDoctorPhoneChange={this.handleDoctorPhoneChange} \n                    doctorFirstNameError = {this.state.doctorFirstNameError}\n                    doctorLastNameError = {this.state.doctorLastNameError}\n                    doctorClinicError = {this.state.doctorClinicError}\n                    doctorPhoneError = {this.state.doctorPhoneError} \n                    doctorFormSuccessMessage = {this.state.doctorFormSuccessMessage}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12} md={6}>\n                  <Paper elevation={4} className={classes.doctorClinicList}>\n                    <Typography gutterBottom variant=\"headline\" component=\"h2\" style={{textAlign: 'center'}} >\n                      Doctors list\n                    </Typography>\n                     {this.state.doctors.map(doctor => {\n                       return (\n                        <DoctorInfo \n                          id={doctor._id}\n                          key={doctor._id}\n                          doctorFirstName={doctor.firstname}\n                          doctorLastName={doctor.lastname}\n                          doctorClinic={doctor.clinic}\n                          doctorPhone={doctor.phone}\n                          deleteDoctor = { this.deleteDoctor } />\n                      );\n                    })}\n                  </Paper>\n                </Grid>\n              </Grid>\n\n              <Grid container spacing={16} className={classes.clinicSection}>\n                <Grid item xs={12} sm={12} md={6}>\n                  <ClinicForm\n                    handleClinicFormSubmit={this.handleClinicFormSubmit}\n                    handleClinicNameChange={this.handleClinicNameChange}\n                    handleClinicAddressChange={this.handleClinicAddressChange}\n                    handleClinicCityChange={this.handleClinicCityChange}\n                    handleClinicStateChange={this.handleClinicStateChange}\n                    handleClinicZipChange={this.handleClinicZipChange}\n                    handleClinicPhoneChange={this.handleClinicPhoneChange}\n                    clinicNameError = {this.state.clinicNameError}\n                    clinicAddressError = {this.state.clinicAddressError}\n                    clinicCityError = {this.state.clinicCityError}\n                    clinicStateError = {this.state.clinicStateError}\n                    clinicZipError = {this.state.clinicZipError}\n                    clinicPhoneError = {this.state.clinicPhoneError}\n                    clinicFormSuccessMessage = {this.state.clinicFormSuccessMessage}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12} md={6}>\n                  <div>\n                    <Paper elevation={4} className={classes.doctorClinicList}>\n                      <Typography gutterBottom variant=\"headline\" component=\"h2\" style={{textAlign: 'center'}}>\n                        Clinics\n                      </Typography>\n                      {this.state.clinics.map(clinic => {\n                        return (\n                          <ClinicInfo \n                            id={clinic._id}\n                            key={clinic._id}\n                            clinicName={clinic.clinicname}\n                            clinicAddress={clinic.address}\n                            clinicCity={clinic.city}\n                            clinicState={clinic.state}\n                            clinicZip={clinic.zip}\n                            clinicPhone={clinic.phone}\n                            deleteClinic={this.deleteClinic} />\n                        );\n                      })}\n                    </Paper>\n                  </div>\n                </Grid>\n              </Grid>\n            </div>\n          </div>\n        </main>\n      </div>,\n    ];\n  }\n}\n\nexport default withStyles(styles)(DoctorList);\n"]},"metadata":{},"sourceType":"module"}